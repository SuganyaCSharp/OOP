C# OOP
OOP stands for Object-Oriented Programming.

Advantages:
OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the C# code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time

Classes:
a class is a template for objects

Class Members:
Fields and methods inside classes are Class Members.

Constructor:
A constructor is a special method that is used to initialize objects.
It can be used to set initial values for fields

Object:
an object is an instance of a class.

Access Modifiers (Encapsulation):
public	    : The code is accessible for all classes
private	    : The code is only accessible within the same class
protected	: The code is accessible within the same class, or in a class that is inherited from that class.
internal	: The code is only accessible within its own assembly, but not from another assembly.

"protected internal" is the special where the field will be both protected and internal.
"internal protected" where the other assemply inheritence can't use this.

Inheritance (Derived and Base Class)
In C#, it is possible to inherit fields and methods from one class to another. We group the "inheritance concept" into two categories:
Derived Class (child) - the class that inherits from another class
Base Class (parent) - the class being inherited from
Sealed: When a class is marked as sealed, it can't be inherited.

Polymorphism:
In C#, Polymorphism is acheived using "new" and "vritual/override" keywords.
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

Abstraction:
Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces.

The abstract keyword is used for classes and methods:
Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).
Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the derived class (inherited from).

Interface
An interface is a completely "abstract class", which can only contain abstract methods and properties.

 
 

Notes on Interfaces:
Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an "IAnimal" object in the Program class)
Interface methods do not have a body - the body is provided by the "implement" class
On implementation of an interface, you must override all of its methods
Interfaces can contain properties and methods, but not fields/variables
Interface members are by default abstract and public
An interface cannot contain a constructor (as it cannot be used to create objects)
Why And When To Use Interfaces?
1) To achieve security - hide certain details and only show the important details of an object (interface).

2) C# does not support "multiple inheritance" (a class can only inherit from one base class). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).

Enum:
An enum is a special "class" that represents a group of constants 
